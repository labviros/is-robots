// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: power.proto

#include "power.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace is {
namespace common {
class PowerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PowerInfo>
      _instance;
} _PowerInfo_default_instance_;
}  // namespace common
}  // namespace is
namespace protobuf_power_2eproto {
void InitDefaultsPowerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  {
    void* ptr = &::is::common::_PowerInfo_default_instance_;
    new (ptr) ::is::common::PowerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::is::common::PowerInfo::InitAsDefaultInstance();
}

void InitDefaultsPowerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPowerInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::common::PowerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::common::PowerInfo, voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::common::PowerInfo, terminal_voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::common::PowerInfo, cell_voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::common::PowerInfo, charge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::common::PowerInfo, capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::common::PowerInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::common::PowerInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::common::PowerInfo, uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::is::common::PowerInfo, autonomy_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::is::common::PowerInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::is::common::_PowerInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "power.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013power.proto\022\tis.common\032\036google/protobu"
      "f/duration.proto\"\274\003\n\tPowerInfo\022\017\n\007voltag"
      "e\030\001 \001(\002\022\030\n\020terminal_voltage\030\002 \001(\002\022\024\n\014cel"
      "l_voltage\030\003 \003(\002\022\016\n\006charge\030\004 \001(\002\022\020\n\010capac"
      "ity\030\005 \001(\002\022.\n\004type\030\006 \001(\0162 .is.common.Powe"
      "rInfo.BatteryType\0222\n\006status\030\007 \001(\0162\".is.c"
      "ommon.PowerInfo.BatteryStatus\022)\n\006uptime\030"
      "\010 \001(\0132\031.google.protobuf.Duration\022+\n\010auto"
      "nomy\030\t \001(\0132\031.google.protobuf.Duration\"3\n"
      "\013BatteryType\022\006\n\002PB\020\000\022\010\n\004NICD\020\001\022\010\n\004NIMH\020\002"
      "\022\010\n\004LIPO\020\003\"[\n\rBatteryStatus\022\013\n\007UNKNOWN\020\000"
      "\022\014\n\010CHARGING\020\001\022\017\n\013DISCHARGING\020\002\022\013\n\007CHARG"
      "ED\020\003\022\021\n\rNOT_CONNECTED\020\004B\020\n\014com.is.robotP"
      "\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 529);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "power.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_power_2eproto
namespace is {
namespace common {
const ::google::protobuf::EnumDescriptor* PowerInfo_BatteryType_descriptor() {
  protobuf_power_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_power_2eproto::file_level_enum_descriptors[0];
}
bool PowerInfo_BatteryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PowerInfo_BatteryType PowerInfo::PB;
const PowerInfo_BatteryType PowerInfo::NICD;
const PowerInfo_BatteryType PowerInfo::NIMH;
const PowerInfo_BatteryType PowerInfo::LIPO;
const PowerInfo_BatteryType PowerInfo::BatteryType_MIN;
const PowerInfo_BatteryType PowerInfo::BatteryType_MAX;
const int PowerInfo::BatteryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PowerInfo_BatteryStatus_descriptor() {
  protobuf_power_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_power_2eproto::file_level_enum_descriptors[1];
}
bool PowerInfo_BatteryStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PowerInfo_BatteryStatus PowerInfo::UNKNOWN;
const PowerInfo_BatteryStatus PowerInfo::CHARGING;
const PowerInfo_BatteryStatus PowerInfo::DISCHARGING;
const PowerInfo_BatteryStatus PowerInfo::CHARGED;
const PowerInfo_BatteryStatus PowerInfo::NOT_CONNECTED;
const PowerInfo_BatteryStatus PowerInfo::BatteryStatus_MIN;
const PowerInfo_BatteryStatus PowerInfo::BatteryStatus_MAX;
const int PowerInfo::BatteryStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void PowerInfo::InitAsDefaultInstance() {
  ::is::common::_PowerInfo_default_instance_._instance.get_mutable()->uptime_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::is::common::_PowerInfo_default_instance_._instance.get_mutable()->autonomy_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void PowerInfo::clear_uptime() {
  if (GetArenaNoVirtual() == NULL && uptime_ != NULL) {
    delete uptime_;
  }
  uptime_ = NULL;
}
void PowerInfo::clear_autonomy() {
  if (GetArenaNoVirtual() == NULL && autonomy_ != NULL) {
    delete autonomy_;
  }
  autonomy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerInfo::kVoltageFieldNumber;
const int PowerInfo::kTerminalVoltageFieldNumber;
const int PowerInfo::kCellVoltageFieldNumber;
const int PowerInfo::kChargeFieldNumber;
const int PowerInfo::kCapacityFieldNumber;
const int PowerInfo::kTypeFieldNumber;
const int PowerInfo::kStatusFieldNumber;
const int PowerInfo::kUptimeFieldNumber;
const int PowerInfo::kAutonomyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerInfo::PowerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_power_2eproto::InitDefaultsPowerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.common.PowerInfo)
}
PowerInfo::PowerInfo(const PowerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cell_voltage_(from.cell_voltage_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_uptime()) {
    uptime_ = new ::google::protobuf::Duration(*from.uptime_);
  } else {
    uptime_ = NULL;
  }
  if (from.has_autonomy()) {
    autonomy_ = new ::google::protobuf::Duration(*from.autonomy_);
  } else {
    autonomy_ = NULL;
  }
  ::memcpy(&voltage_, &from.voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&voltage_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:is.common.PowerInfo)
}

void PowerInfo::SharedCtor() {
  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(status_));
  _cached_size_ = 0;
}

PowerInfo::~PowerInfo() {
  // @@protoc_insertion_point(destructor:is.common.PowerInfo)
  SharedDtor();
}

void PowerInfo::SharedDtor() {
  if (this != internal_default_instance()) delete uptime_;
  if (this != internal_default_instance()) delete autonomy_;
}

void PowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerInfo::descriptor() {
  ::protobuf_power_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_power_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PowerInfo& PowerInfo::default_instance() {
  ::protobuf_power_2eproto::InitDefaultsPowerInfo();
  return *internal_default_instance();
}

PowerInfo* PowerInfo::New(::google::protobuf::Arena* arena) const {
  PowerInfo* n = new PowerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PowerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:is.common.PowerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_voltage_.Clear();
  if (GetArenaNoVirtual() == NULL && uptime_ != NULL) {
    delete uptime_;
  }
  uptime_ = NULL;
  if (GetArenaNoVirtual() == NULL && autonomy_ != NULL) {
    delete autonomy_;
  }
  autonomy_ = NULL;
  ::memset(&voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&voltage_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool PowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.common.PowerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float voltage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float terminal_voltage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &terminal_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float cell_voltage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cell_voltage())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_cell_voltage())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float charge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float capacity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.common.PowerInfo.BatteryType type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::is::common::PowerInfo_BatteryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.common.PowerInfo.BatteryStatus status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::is::common::PowerInfo_BatteryStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration uptime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uptime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration autonomy = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_autonomy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.common.PowerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.common.PowerInfo)
  return false;
#undef DO_
}

void PowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.common.PowerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float voltage = 1;
  if (this->voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->voltage(), output);
  }

  // float terminal_voltage = 2;
  if (this->terminal_voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->terminal_voltage(), output);
  }

  // repeated float cell_voltage = 3;
  if (this->cell_voltage_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _cell_voltage_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->cell_voltage().data(), this->cell_voltage_size(), output);
  }

  // float charge = 4;
  if (this->charge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->charge(), output);
  }

  // float capacity = 5;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->capacity(), output);
  }

  // .is.common.PowerInfo.BatteryType type = 6;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // .is.common.PowerInfo.BatteryStatus status = 7;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->status(), output);
  }

  // .google.protobuf.Duration uptime = 8;
  if (this->has_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->uptime_, output);
  }

  // .google.protobuf.Duration autonomy = 9;
  if (this->has_autonomy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->autonomy_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.common.PowerInfo)
}

::google::protobuf::uint8* PowerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.common.PowerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float voltage = 1;
  if (this->voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->voltage(), target);
  }

  // float terminal_voltage = 2;
  if (this->terminal_voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->terminal_voltage(), target);
  }

  // repeated float cell_voltage = 3;
  if (this->cell_voltage_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _cell_voltage_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->cell_voltage_, target);
  }

  // float charge = 4;
  if (this->charge() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->charge(), target);
  }

  // float capacity = 5;
  if (this->capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->capacity(), target);
  }

  // .is.common.PowerInfo.BatteryType type = 6;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // .is.common.PowerInfo.BatteryStatus status = 7;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->status(), target);
  }

  // .google.protobuf.Duration uptime = 8;
  if (this->has_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->uptime_, deterministic, target);
  }

  // .google.protobuf.Duration autonomy = 9;
  if (this->has_autonomy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->autonomy_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.common.PowerInfo)
  return target;
}

size_t PowerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.common.PowerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float cell_voltage = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cell_voltage_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cell_voltage_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .google.protobuf.Duration uptime = 8;
  if (this->has_uptime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->uptime_);
  }

  // .google.protobuf.Duration autonomy = 9;
  if (this->has_autonomy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->autonomy_);
  }

  // float voltage = 1;
  if (this->voltage() != 0) {
    total_size += 1 + 4;
  }

  // float terminal_voltage = 2;
  if (this->terminal_voltage() != 0) {
    total_size += 1 + 4;
  }

  // float charge = 4;
  if (this->charge() != 0) {
    total_size += 1 + 4;
  }

  // float capacity = 5;
  if (this->capacity() != 0) {
    total_size += 1 + 4;
  }

  // .is.common.PowerInfo.BatteryType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .is.common.PowerInfo.BatteryStatus status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.common.PowerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PowerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.common.PowerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.common.PowerInfo)
    MergeFrom(*source);
  }
}

void PowerInfo::MergeFrom(const PowerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.common.PowerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_voltage_.MergeFrom(from.cell_voltage_);
  if (from.has_uptime()) {
    mutable_uptime()->::google::protobuf::Duration::MergeFrom(from.uptime());
  }
  if (from.has_autonomy()) {
    mutable_autonomy()->::google::protobuf::Duration::MergeFrom(from.autonomy());
  }
  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
  if (from.terminal_voltage() != 0) {
    set_terminal_voltage(from.terminal_voltage());
  }
  if (from.charge() != 0) {
    set_charge(from.charge());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void PowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.common.PowerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerInfo::CopyFrom(const PowerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.common.PowerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerInfo::IsInitialized() const {
  return true;
}

void PowerInfo::Swap(PowerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerInfo::InternalSwap(PowerInfo* other) {
  using std::swap;
  cell_voltage_.InternalSwap(&other->cell_voltage_);
  swap(uptime_, other->uptime_);
  swap(autonomy_, other->autonomy_);
  swap(voltage_, other->voltage_);
  swap(terminal_voltage_, other->terminal_voltage_);
  swap(charge_, other->charge_);
  swap(capacity_, other->capacity_);
  swap(type_, other->type_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PowerInfo::GetMetadata() const {
  protobuf_power_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_power_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace is

// @@protoc_insertion_point(global_scope)
